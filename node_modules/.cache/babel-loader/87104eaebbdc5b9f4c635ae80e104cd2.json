{"ast":null,"code":"var _jsxFileName = \"/Users/zhaoshuai/Desktop/covid-map/src/components/CovidMap.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapUtils from '../utils/MapUtils';\nimport CovidDataService from '../service/CovidDataService';\nimport CaseCard from './CaseCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CovidMap extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      zoomLevel: 6,\n      boundary: {},\n      points: {}\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Important! Always set the container height explicitly\n      _jsxDEV(\"div\", {\n        style: {\n          height: '100vh',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GoogleMapReact, {\n          bootstrapURLKeys: {\n            key: \"AIzaSyDzt6zlUyk1nOEziTAvI5gqymDhup5S9qg\"\n          },\n          defaultCenter: this.props.center,\n          defaultZoom: this.props.zoom,\n          onGoogleApiLoaded: () => {\n            CovidDataService.getAllCountyCases().then(response => {\n              this.setState({\n                points: MapUtils.convertCovidPoints(response.data)\n              });\n            }).catch(error => {\n              console.error(error);\n            });\n          },\n          onChange: changeEventObject => {\n            this.setState({\n              zoomLevel: changeEventObject.zoom,\n              boundary: changeEventObject.bounds\n            });\n          },\n          children: this.renderCovidPoints()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  renderCovidPoints() {\n    const result = [];\n    const zoomLevel = this.state.zoomLevel; // 1-4 nation level\n    // 5-9 state level\n    // 10-20 county level\n\n    if (zoomLevel < 1 || zoomLevel > 20) {\n      return result;\n    }\n\n    let pointsLevel = 'county';\n\n    if (zoomLevel >= 1 && zoomLevel <= 4) {\n      pointsLevel = 'nation';\n    } else if (zoomLevel > 4 && zoomLevel <= 9) {\n      pointsLevel = 'state';\n    }\n\n    const pointsToRender = this.state.points[pointsLevel]; // Sanity Check -> first time render this component but data not available\n\n    if (!pointsToRender) {\n      return result;\n    }\n\n    if (pointsLevel === 'county') {\n      for (const point of pointsToRender) {\n        if (MapUtils.isInBoundary(this.state.boundary, point.coordinates)) {\n          result.push( /*#__PURE__*/_jsxDEV(CaseCard, {\n            lat: point.coordinates.latitude,\n            lng: point.coordinates.longitude,\n            subTitle: point.province,\n            title: point.county,\n            confirmed: point.stats.confirmed,\n            deaths: point.stats.deaths\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this));\n        }\n      }\n    } else if (pointsLevel === 'state') {\n      for (const state in pointsToRender) {\n        const point = pointsToRender[state];\n\n        if (MapUtils.isInBoundary(this.state.boundary, point.coordinates)) {\n          result.push( /*#__PURE__*/_jsxDEV(CaseCard, {\n            lat: point.coordinates.latitude,\n            lng: point.coordinates.longitude,\n            subTitle: point.country,\n            title: state,\n            confirmed: point.confirmed,\n            deaths: point.deaths\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this));\n        }\n      }\n    }\n\n    return result;\n  }\n\n}\n\nCovidMap.defaultProps = {\n  center: {\n    lat: 40,\n    lng: -95\n  },\n  zoom: 6\n};\nexport default CovidMap;","map":{"version":3,"sources":["/Users/zhaoshuai/Desktop/covid-map/src/components/CovidMap.js"],"names":["React","Component","GoogleMapReact","MapUtils","CovidDataService","CaseCard","CovidMap","state","zoomLevel","boundary","points","render","height","width","key","props","center","zoom","getAllCountyCases","then","response","setState","convertCovidPoints","data","catch","error","console","changeEventObject","bounds","renderCovidPoints","result","pointsLevel","pointsToRender","point","isInBoundary","coordinates","push","latitude","longitude","province","county","stats","confirmed","deaths","country","defaultProps","lat","lng"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapUtils from '../utils/MapUtils';\nimport CovidDataService from '../service/CovidDataService';\nimport CaseCard from './CaseCard'\n\nclass CovidMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 40,\n      lng: -95\n    },\n    zoom: 6\n  };\n\n  state = {\n    zoomLevel: 6,\n    boundary: {},\n    points: {}\n  }\n\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyDzt6zlUyk1nOEziTAvI5gqymDhup5S9qg\" }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          onGoogleApiLoaded={\n              () => {\n                  CovidDataService.getAllCountyCases()\n                    .then(response => {\n                        this.setState({\n                            points: MapUtils.convertCovidPoints(response.data)\n                        });\n                    }).catch(error => {\n                        console.error(error);\n                  })\n              }\n          }\n          onChange={(changeEventObject) => {\n            this.setState({\n                zoomLevel: changeEventObject.zoom,\n                boundary: changeEventObject.bounds\n            });\n          }}\n        >\n          {this.renderCovidPoints()}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n  renderCovidPoints() {\n    const result = [];\n    const zoomLevel = this.state.zoomLevel;\n    // 1-4 nation level\n    // 5-9 state level\n    // 10-20 county level\n    if (zoomLevel < 1 || zoomLevel > 20) {\n        return result;\n    }\n    let pointsLevel = 'county';\n    if (zoomLevel >= 1 && zoomLevel <= 4) {\n        pointsLevel = 'nation';\n    } else if (zoomLevel > 4 && zoomLevel <= 9) {\n        pointsLevel = 'state';\n    }\n    const pointsToRender = this.state.points[pointsLevel];\n    // Sanity Check -> first time render this component but data not available\n    if (!pointsToRender) {\n        return result;\n    }\n    if (pointsLevel === 'county') {\n        for (const point of pointsToRender) {\n            if (MapUtils.isInBoundary(this.state.boundary, point.coordinates)) {\n                result.push(\n                    <CaseCard\n                        lat={point.coordinates.latitude}\n                        lng={point.coordinates.longitude}\n                        subTitle={point.province}\n                        title={point.county}\n                        confirmed={point.stats.confirmed}\n                        deaths={point.stats.deaths}\n                    />\n                )\n            }\n        }\n    } else if (pointsLevel === 'state') {\n        for (const state in pointsToRender) {\n            const point = pointsToRender[state];\n            if (MapUtils.isInBoundary(this.state.boundary, point.coordinates)) {\n                result.push(\n                    <CaseCard\n                        lat={point.coordinates.latitude}\n                        lng={point.coordinates.longitude}\n                        subTitle={point.country}\n                        title={state}\n                        confirmed={point.confirmed}\n                        deaths={point.deaths}\n                    />\n                )\n            }\n        }\n    }\n    return result;\n  }\n}\n\nexport default CovidMap;"]},"metadata":{},"sourceType":"module"}