{"ast":null,"code":"export const MapUtils = {\n  // aggregate county level raw data to states and nations levels\n  convertCovidPoints: function (countyLevelPoints) {\n    if (!countyLevelPoints) {\n      return {};\n    }\n\n    let result = {\n      'county': countyLevelPoints,\n      'state': {},\n      'nation': {}\n    };\n    let stateData = {}; // aggregate data by state\n\n    for (const point of countyLevelPoints) {\n      //sanity check\n      if (Number.isNaN(point.stats.confirmed) || Number.isNaN(point.stats.deaths)) {\n        console.error('Got dirty data', point);\n        continue;\n      } // Initialize the new province\n\n\n      if (!stateData[point.province]) {\n        stateData[point.province] = {\n          confirmed: 0,\n          deaths: 0\n        };\n      } // initialize points and country\n\n\n      if (!stateData[point.province].coordinates) {\n        stateData[point.province].coordinates = point.coordinates;\n      }\n\n      if (!stateData[point.province].country) {\n        stateData[point.province].country = point.country;\n      } // aggregate\n\n\n      stateData[point.province].confirmed += point.stats.confirmed;\n      stateData[point.province].deaths += point.stats.deaths;\n    }\n\n    result['state'] = stateData; // TODO: aggregate data by nation\n\n    return result;\n  },\n  isInBoundary: function (bounds, coordinates) {\n    return coordinates && bounds && bounds.nw && bounds.se && (coordinates.longitude >= bounds.nw.lng && coordinates.longitude <= bounds.se.lng || coordinates.longitude <= bounds.nw.lng && coordinates.longitude >= bounds.se.lng) && (coordinates.latitude >= bounds.se.lat && coordinates.latitude <= bounds.nw.lat || coordinates.latitude <= bounds.se.lat && coordinates.latitude >= bounds.nw.lat);\n  }\n};","map":{"version":3,"sources":["/Users/shuaizhao/Desktop/covid-map/src/utils/MapUtils.js"],"names":["MapUtils","convertCovidPoints","countyLevelPoints","result","stateData","point","Number","isNaN","stats","confirmed","deaths","console","error","province","coordinates","country","isInBoundary","bounds","nw","se","longitude","lng","latitude","lat"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG;AACpB;AACAC,EAAAA,kBAAkB,EAAE,UAASC,iBAAT,EAA4B;AAC5C,QAAI,CAACA,iBAAL,EAAwB;AACpB,aAAO,EAAP;AACH;;AAED,QAAIC,MAAM,GAAG;AACT,gBAAUD,iBADD;AAET,eAAS,EAFA;AAGT,gBAAU;AAHD,KAAb;AAMA,QAAIE,SAAS,GAAG,EAAhB,CAX4C,CAY5C;;AACA,SAAK,MAAMC,KAAX,IAAoBH,iBAApB,EAAuC;AACnC;AACA,UAAII,MAAM,CAACC,KAAP,CAAaF,KAAK,CAACG,KAAN,CAAYC,SAAzB,KAAuCH,MAAM,CAACC,KAAP,CAAaF,KAAK,CAACG,KAAN,CAAYE,MAAzB,CAA3C,EAA6E;AACzEC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCP,KAAhC;AACA;AACH,OALkC,CAMnC;;;AACA,UAAI,CAACD,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAd,EAAgC;AAC5BT,QAAAA,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,GAA4B;AACxBJ,UAAAA,SAAS,EAAE,CADa;AAExBC,UAAAA,MAAM,EAAE;AAFgB,SAA5B;AAIH,OAZkC,CAanC;;;AACA,UAAI,CAACN,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BC,WAA/B,EAA4C;AACxCV,QAAAA,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BC,WAA1B,GAAwCT,KAAK,CAACS,WAA9C;AACH;;AACD,UAAI,CAACV,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BE,OAA/B,EAAwC;AACpCX,QAAAA,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BE,OAA1B,GAAoCV,KAAK,CAACU,OAA1C;AACH,OAnBkC,CAoBnC;;;AACAX,MAAAA,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BJ,SAA1B,IAAuCJ,KAAK,CAACG,KAAN,CAAYC,SAAnD;AACAL,MAAAA,SAAS,CAACC,KAAK,CAACQ,QAAP,CAAT,CAA0BH,MAA1B,IAAoCL,KAAK,CAACG,KAAN,CAAYE,MAAhD;AACH;;AACDP,IAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBC,SAAlB,CArC4C,CAuC5C;;AACA,WAAOD,MAAP;AACH,GA3CmB;AA4CpBa,EAAAA,YAAY,EAAE,UAAUC,MAAV,EAAkBH,WAAlB,EAA+B;AACzC,WAAOA,WAAW,IAAIG,MAAf,IAAyBA,MAAM,CAACC,EAAhC,IAAsCD,MAAM,CAACE,EAA7C,KACFL,WAAW,CAACM,SAAZ,IAAyBH,MAAM,CAACC,EAAP,CAAUG,GAAnC,IAA0CP,WAAW,CAACM,SAAZ,IAAyBH,MAAM,CAACE,EAAP,CAAUE,GAA9E,IAAuFP,WAAW,CAACM,SAAZ,IAAyBH,MAAM,CAACC,EAAP,CAAUG,GAAnC,IAA0CP,WAAW,CAACM,SAAZ,IAAyBH,MAAM,CAACE,EAAP,CAAUE,GADjK,MAEFP,WAAW,CAACQ,QAAZ,IAAwBL,MAAM,CAACE,EAAP,CAAUI,GAAlC,IAAyCT,WAAW,CAACQ,QAAZ,IAAwBL,MAAM,CAACC,EAAP,CAAUK,GAA5E,IAAqFT,WAAW,CAACQ,QAAZ,IAAwBL,MAAM,CAACE,EAAP,CAAUI,GAAlC,IAAyCT,WAAW,CAACQ,QAAZ,IAAwBL,MAAM,CAACC,EAAP,CAAUK,GAF7J,CAAP;AAGH;AAhDmB,CAAjB","sourcesContent":["export const MapUtils = {\n    // aggregate county level raw data to states and nations levels\n    convertCovidPoints: function(countyLevelPoints) {\n        if (!countyLevelPoints) {\n            return {};\n        }\n\n        let result = {\n            'county': countyLevelPoints,\n            'state': {},\n            'nation': {}\n        };\n\n        let stateData = {};\n        // aggregate data by state\n        for (const point of countyLevelPoints) {\n            //sanity check\n            if (Number.isNaN(point.stats.confirmed) || Number.isNaN(point.stats.deaths)) {\n                console.error('Got dirty data', point);\n                continue;\n            }\n            // Initialize the new province\n            if (!stateData[point.province]) {\n                stateData[point.province] = {\n                    confirmed: 0, \n                    deaths: 0,\n                };\n            }\n            // initialize points and country\n            if (!stateData[point.province].coordinates) {\n                stateData[point.province].coordinates = point.coordinates;\n            }\n            if (!stateData[point.province].country) {\n                stateData[point.province].country = point.country;\n            }\n            // aggregate\n            stateData[point.province].confirmed += point.stats.confirmed;\n            stateData[point.province].deaths += point.stats.deaths;\n        }\n        result['state'] = stateData;\n\n        // TODO: aggregate data by nation\n        return result;\n    },\n    isInBoundary: function (bounds, coordinates) {\n        return coordinates && bounds && bounds.nw && bounds.se \n        && ((coordinates.longitude >= bounds.nw.lng && coordinates.longitude <= bounds.se.lng) || (coordinates.longitude <= bounds.nw.lng && coordinates.longitude >= bounds.se.lng)) \n        && ((coordinates.latitude >= bounds.se.lat && coordinates.latitude <= bounds.nw.lat) || (coordinates.latitude <= bounds.se.lat && coordinates.latitude >= bounds.nw.lat));\n    }\n};"]},"metadata":{},"sourceType":"module"}